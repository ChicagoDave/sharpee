// packages/core/src/parser/languages/en-US/__tests__/phrase-identifier.test.ts

import { 
  TaggedWord, 
  PartOfSpeech, 
  Phrase, 
  PhraseType,
  TokenType 
} from '../../../core/types';
import { EnglishPhraseIdentifier } from '../phrase-identifier';

describe('EnglishPhraseIdentifier', () => {
  let phraseIdentifier: EnglishPhraseIdentifier;
  
  beforeEach(() => {
    phraseIdentifier = new EnglishPhraseIdentifier();
  });
  
  // Helper to create tagged words for testing
  const createTaggedWord = (
    text: string, 
    partOfSpeech: PartOfSpeech, 
    position: number = 0
  ): TaggedWord => ({
    text,
    normalized: text.toLowerCase(),
    type: TokenType.WORD,
    position,
    partOfSpeech,
    confidence: 1.0,
    lemma: text.toLowerCase()
  });
  
  // Helper to create a sequence of words with parts of speech
  const createTaggedWords = (wordPairs: [string, PartOfSpeech][]): TaggedWord[] => {
    return wordPairs.map(([text, pos], index) => 
      createTaggedWord(text, pos, index)
    );
  };
  
  describe('Basic Phrase Identification', () => {
    it('should identify a simple verb phrase', () => {
      const words = createTaggedWords([
        ['Take', PartOfSpeech.VERB]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      expect(phrases).toHaveLength(1);
      expect(phrases[0].type).toBe(PhraseType.VERB_PHRASE);
      expect(phrases[0].words).toHaveLength(1);
      expect(phrases[0].headWord?.text).toBe('Take');
    });
    
    it('should identify a simple noun phrase', () => {
      const words = createTaggedWords([
        ['the', PartOfSpeech.ARTICLE],
        ['key', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      expect(phrases).toHaveLength(1);
      expect(phrases[0].type).toBe(PhraseType.NOUN_PHRASE);
      expect(phrases[0].words).toHaveLength(2);
      expect(phrases[0].headWord?.text).toBe('key');
    });
    
    it('should identify a simple prepositional phrase', () => {
      const words = createTaggedWords([
        ['on', PartOfSpeech.PREPOSITION],
        ['the', PartOfSpeech.ARTICLE],
        ['table', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      expect(phrases).toHaveLength(1);
      expect(phrases[0].type).toBe(PhraseType.PREPOSITIONAL_PHRASE);
      expect(phrases[0].words).toHaveLength(3);
      expect(phrases[0].headWord?.text).toBe('on');
    });
  });
  
  describe('Complex Phrase Identification', () => {
    it('should identify a basic command with verb and object', () => {
      const words = createTaggedWords([
        ['Take', PartOfSpeech.VERB],
        ['the', PartOfSpeech.ARTICLE],
        ['key', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      expect(phrases).toHaveLength(2);
      expect(phrases[0].type).toBe(PhraseType.VERB_PHRASE);
      expect(phrases[1].type).toBe(PhraseType.NOUN_PHRASE);
    });
    
    it('should identify a complex noun phrase with adjectives', () => {
      const words = createTaggedWords([
        ['the', PartOfSpeech.ARTICLE],
        ['small', PartOfSpeech.ADJECTIVE],
        ['brass', PartOfSpeech.ADJECTIVE],
        ['key', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      expect(phrases).toHaveLength(1);
      expect(phrases[0].type).toBe(PhraseType.NOUN_PHRASE);
      expect(phrases[0].words).toHaveLength(4);
      expect(phrases[0].headWord?.text).toBe('key');
    });
    
    it('should identify prepositional phrases following noun phrases', () => {
      const words = createTaggedWords([
        ['Take', PartOfSpeech.VERB],
        ['the', PartOfSpeech.ARTICLE],
        ['key', PartOfSpeech.NOUN],
        ['from', PartOfSpeech.PREPOSITION],
        ['the', PartOfSpeech.ARTICLE],
        ['table', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      // Without nesting: verb phrase, noun phrase, prep phrase
      expect(phrases.length).toBeGreaterThanOrEqual(3);
      
      // Verify phrase types
      expect(phrases[0].type).toBe(PhraseType.VERB_PHRASE);
      expect(phrases[1].type).toBe(PhraseType.NOUN_PHRASE);
      
      // With nesting enabled (default), the prep phrase should be part of the noun phrase
      // or in a separate phrase depending on the implementation
      const prepPhrase = phrases.find(p => p.type === PhraseType.PREPOSITIONAL_PHRASE);
      expect(prepPhrase).toBeDefined();
      expect(prepPhrase?.headWord?.text).toBe('from');
    });
  });
  
  describe('Nested Prepositional Phrases', () => {
    it('should nest prepositional phrases with the nestPrepositionalPhrases option', () => {
      // Create a phrase identifier with nesting enabled
      const nestingIdentifier = new EnglishPhraseIdentifier({ 
        nestPrepositionalPhrases: true 
      });
      
      const words = createTaggedWords([
        ['the', PartOfSpeech.ARTICLE],
        ['book', PartOfSpeech.NOUN],
        ['on', PartOfSpeech.PREPOSITION],
        ['the', PartOfSpeech.ARTICLE],
        ['shelf', PartOfSpeech.NOUN],
        ['in', PartOfSpeech.PREPOSITION],
        ['the', PartOfSpeech.ARTICLE],
        ['library', PartOfSpeech.NOUN]
      ]);
      
      const phrases = nestingIdentifier.identifyPhrases(words);
      
      // The exact structure depends on implementation, but we expect fewer phrases
      // than if nesting is disabled, and the headWord of the first phrase should be 'book'
      expect(phrases[0].headWord?.text).toBe('book');
      
      // Create a phrase identifier with nesting disabled for comparison
      const nonNestingIdentifier = new EnglishPhraseIdentifier({ 
        nestPrepositionalPhrases: false 
      });
      
      const nonNestedPhrases = nonNestingIdentifier.identifyPhrases(words);
      
      // Without nesting, we expect more distinct phrases
      expect(nonNestedPhrases.length).toBeGreaterThanOrEqual(phrases.length);
    });
  });
  
  describe('Conjunction Handling', () => {
    it('should handle conjunctions between similar phrases', () => {
      const words = createTaggedWords([
        ['Take', PartOfSpeech.VERB],
        ['the', PartOfSpeech.ARTICLE],
        ['knife', PartOfSpeech.NOUN],
        ['and', PartOfSpeech.CONJUNCTION],
        ['the', PartOfSpeech.ARTICLE],
        ['fork', PartOfSpeech.NOUN]
      ]);
      
      const phrases = phraseIdentifier.identifyPhrases(words);
      
      // We should have at least 3 phrases: verb, first noun, and second noun
      // The exact number depends on how conjunctions are handled
      expect(phrases.length).toBeGreaterThanOrEqual(3);
      
      // Verify the verb phrase
      expect(phrases[0].type).toBe(PhraseType.VERB_PHRASE);
      
      // Find noun phrases
      const nounPhrases = phrases.filter(p => p.type === PhraseType.NOUN_PHRASE);
      expect(nounPhrases.length).toBeGreaterThanOrEqual(2);
      
      // Check for the nouns in the phrases
      const hasKnife = nounPhrases.some(p => 
        p.words.some(w => w.text === 'knife')
      );
      const hasFork = nounPhrases.some(p => 
        p.words.some(w => w.text === 'fork')
      );
      
      expect(hasKnife).toBe(true);
      expect(hasFork).toBe(true);
    });
  });
});