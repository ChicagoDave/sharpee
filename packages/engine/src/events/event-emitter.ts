/**
 * Event emitter for managing game events
 */

import { SemanticEvent } from '@sharpee/core';
import { GameEvent, EntityEventHandler } from '@sharpee/world-model';

/**
 * Simple event emitter for the game event system
 * Manages both story-level and entity-level event handlers
 */
export class EventEmitter {
  private handlers: Map<string, EntityEventHandler[]> = new Map();
  
  /**
   * Register a handler for an event type
   */
  on(eventType: string, handler: EntityEventHandler): void {
    const handlers = this.handlers.get(eventType) || [];
    handlers.push(handler);
    this.handlers.set(eventType, handlers);
  }
  
  /**
   * Remove a handler for an event type
   */
  off(eventType: string, handler: EntityEventHandler): void {
    const handlers = this.handlers.get(eventType);
    if (handlers) {
      const index = handlers.indexOf(handler);
      if (index !== -1) {
        handlers.splice(index, 1);
      }
    }
  }
  
  /**
   * Emit an event to all registered handlers
   * Returns any semantic events generated by handlers
   */
  emit(event: GameEvent): SemanticEvent[] {
    const results: SemanticEvent[] = [];
    const handlers = this.handlers.get(event.type) || [];
    
    for (const handler of handlers) {
      const result = handler(event);
      if (result) {
        results.push(...result);
      }
    }
    
    return results;
  }
  
  /**
   * Clear all handlers for a specific event type
   */
  clear(eventType?: string): void {
    if (eventType) {
      this.handlers.delete(eventType);
    } else {
      this.handlers.clear();
    }
  }
  
  /**
   * Get count of handlers for an event type
   */
  listenerCount(eventType: string): number {
    return this.handlers.get(eventType)?.length || 0;
  }
}