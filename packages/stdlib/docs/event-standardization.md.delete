# Event Data Standardization Migration Guide

## Overview

We've identified a significant design flaw in how actions emit event data. Actions were inconsistently using entity names vs IDs in their event data, leading to test failures and potential bugs.

## The Problem

Previously, actions would emit events like this:
```javascript
// Inconsistent - mixing names and IDs
context.emit('if.event.closed', {
  item: noun.name,        // Using name!
  container: container.id  // Using ID!
});
```

Tests expected:
```javascript
expectEvent(events, 'if.event.closed', {
  item: object.id,  // Expected ID, got name!
});
```

## The Solution

### 1. Standardized Event Data Types

We've created type-safe interfaces for all event types in `src/events/event-types.ts`:

```typescript
interface ContainerEventData {
  // Always use IDs for entity references
  containerId: EntityId;
  containerName: string;  // Include name separately when needed
  
  // Consistent field names
  isContainer?: boolean;
  isDoor?: boolean;
  hasContents?: boolean;
  contentsCount?: number;
  contentsIds?: EntityId[];
}
```

### 2. Event Builder Helper

Use the event builder to create properly formatted events:

```typescript
import { createEventBuilder } from '../../events';

const eventBuilder = createEventBuilder(context);

// Container manipulation
eventBuilder.containerManipulation('if.event.closed', container, {
  isContainer: true,
  contents: [...entities]
});

// Object manipulation
eventBuilder.objectManipulation('if.event.taken', object, {
  fromLocation: container,
  isFromContainer: true
});
```

### 3. Migration Steps

For each action:

1. Import the event builder:
   ```typescript
   import { createEventBuilder } from '../../events';
   ```

2. Create builder in execute method:
   ```typescript
   const eventBuilder = createEventBuilder(context);
   ```

3. Replace manual event creation with builder methods:
   ```typescript
   // Before
   context.emit('if.event.closed', {
     item: noun.name,
     isContainer: true
   });
   
   // After
   eventBuilder.containerManipulation('if.event.closed', noun, {
     isContainer: true,
     contents: getContents()
   });
   ```

4. Update tests to expect standardized format:
   ```typescript
   expectEvent(events, 'if.event.closed', {
     containerId: object.id,      // ID field
     containerName: 'wooden box', // Name field
     isContainer: true
   });
   ```

## Actions to Migrate

### High Priority (most test failures)
- [x] closing.ts
- [x] opening.ts
- [x] unlocking.ts
- [ ] locking.ts
- [ ] taking.ts
- [ ] dropping.ts
- [ ] putting.ts
- [ ] removing.ts

### Medium Priority
- [ ] examining.ts
- [ ] looking.ts
- [ ] wearing.ts
- [ ] attacking.ts
- [ ] throwing.ts
- [ ] drinking.ts
- [ ] turning.ts

### Lower Priority
- [ ] All other actions...

## Benefits

1. **Type Safety**: TypeScript knows the exact shape of event data
2. **Consistency**: All actions use the same field names and patterns
3. **Maintainability**: Changes to event structure only need to happen in one place
4. **Documentation**: Event types serve as documentation for what data each event contains
5. **Testing**: Tests can rely on consistent event structure

## Example: Full Migration

See `closing.ts` and `closing-golden.test.ts` for a complete example of the migration.
