{
  "uuid": "f9474155-4037-4242-bc02-550ebf702dce",
  "name": "Unit Tests for Language Components",
  "created_at": "2024-08-28T01:09:42.470657Z",
  "updated_at": "2024-08-28T01:10:08.489940Z",
  "account": {
    "uuid": "760c9b93-a257-47cd-bd61-d0b15a821e02"
  },
  "chat_messages": [
    {
      "uuid": "3facb1b8-cfae-4123-84a8-ee62dfbb4e53",
      "text": "We're implementing unit tests. Let's do Language next.",
      "content": [
        {
          "start_timestamp": "2024-08-28T01:10:06.034982Z",
          "stop_timestamp": "2024-08-28T01:10:06.034982Z",
          "type": "text",
          "text": "We're implementing unit tests. Let's do Language next.",
          "citations": []
        }
      ],
      "sender": "human",
      "created_at": "2024-08-28T01:10:06.034982Z",
      "updated_at": "2024-08-28T01:10:06.034982Z",
      "attachments": [],
      "files": []
    },
    {
      "uuid": "735cd307-eb8d-4621-8d98-dde497993310",
      "text": " Certainly! Let's implement unit tests for the Language components of our Interactive Fiction engine. We'll focus on testing the `LanguageManager` class and related functionality. I'll create a new test class called `LanguageTests` that will cover various aspects of the language system.\n\n<antThinking>\nThis task requires creating unit tests for the Language components. It's a substantial piece of code that will be useful for ensuring the correct functionality of our language system. As it's a standalone test class, it's a good candidate for an artifact.\n</antThinking>\n\n<antArtifact identifier=\"language-tests\" type=\"application/vnd.ant.code\" language=\"csharp\" title=\"LanguageTests.cs\">\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Language;\nusing System;\nusing System.Reflection;\n\nnamespace Language.Tests\n{\n    [TestClass]\n    public class LanguageTests\n    {\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldLoadCoreLanguageConstants()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            Assert.AreEqual(\"go\", LanguageManager.GetText(LanguageKeys.Verb_Go));\n            Assert.AreEqual(\"look\", LanguageManager.GetText(LanguageKeys.Verb_Look));\n        }\n\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldLoadAdditionalConstants()\n        {\n            LanguageManager.Initialize(\"en-US\", typeof(TestLanguageExtensions));\n\n            Assert.AreEqual(\"test verb\", LanguageManager.GetText(\"Test_Verb\"));\n        }\n\n        [TestMethod]\n        public void LanguageManager_GetText_ShouldReturnCorrectText()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            Assert.AreEqual(\"Go where?\", LanguageManager.GetText(LanguageKeys.Go_WherePrompt));\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(ArgumentException))]\n        public void LanguageManager_GetText_ShouldThrowExceptionForInvalidKey()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            LanguageManager.GetText(\"InvalidKey\");\n        }\n\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldOverrideExistingConstantsWithAdditionalSources()\n        {\n            LanguageManager.Initialize(\"en-US\", typeof(TestLanguageOverrides));\n\n            Assert.AreEqual(\"Custom go text\", LanguageManager.GetText(LanguageKeys.Verb_Go));\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(ArgumentException))]\n        public void LanguageManager_Initialize_ShouldThrowExceptionForUnsupportedLanguage()\n        {\n            LanguageManager.Initialize(\"xx-XX\");\n        }\n\n        [TestMethod]\n        public void LanguageAttribute_ShouldBeAppliedCorrectly()\n        {\n            var enUsType = typeof(EnglishUS);\n            var attribute = enUsType.GetCustomAttribute<LanguageAttribute>();\n\n            Assert.IsNotNull(attribute);\n            Assert.AreEqual(\"en-US\", attribute.LanguageCode);\n        }\n    }\n\n    public static class TestLanguageExtensions\n    {\n        public const string Test_Verb = \"test verb\";\n    }\n\n    public static class TestLanguageOverrides\n    {\n        public const string Verb_Go = \"Custom go text\";\n    }\n}\n</antArtifact>\n\nNow, let me explain the key aspects of these unit tests:\n\n1. We're testing the `LanguageManager` class, which is responsible for managing language strings in our IF engine.\n\n2. We test the `Initialize` method with different scenarios:\n   - Loading core language constants\n   - Loading additional constants from a custom class\n   - Overriding existing constants with additional sources\n\n3. We test the `GetText` method for both valid and invalid keys.\n\n4. We ensure that an exception is thrown when trying to initialize with an unsupported language.\n\n5. We also test that the `LanguageAttribute` is applied correctly to our language classes.\n\nThese tests cover the main functionality of our language system, ensuring that:\n\n- Core language constants are loaded correctly\n- Additional language constants can be added\n- Existing constants can be overridden\n- The system behaves correctly with valid and invalid inputs\n- The `LanguageAttribute` is used correctly for language identification\n\nTo run these tests, you'll need to make sure that the `LanguageManager`, `LanguageKeys`, `EnglishUS`, and `LanguageAttribute` classes are accessible to the test project. You might need to adjust the namespace or add appropriate using statements depending on your project structure.\n\nIs there anything specific about the language system you'd like me to add more tests for?",
      "content": [
        {
          "start_timestamp": "2024-08-28T01:10:06.034982Z",
          "stop_timestamp": "2024-08-28T01:10:06.034982Z",
          "type": "text",
          "text": " Certainly! Let's implement unit tests for the Language components of our Interactive Fiction engine. We'll focus on testing the `LanguageManager` class and related functionality. I'll create a new test class called `LanguageTests` that will cover various aspects of the language system.\n\n<antThinking>\nThis task requires creating unit tests for the Language components. It's a substantial piece of code that will be useful for ensuring the correct functionality of our language system. As it's a standalone test class, it's a good candidate for an artifact.\n</antThinking>\n\n<antArtifact identifier=\"language-tests\" type=\"application/vnd.ant.code\" language=\"csharp\" title=\"LanguageTests.cs\">\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Language;\nusing System;\nusing System.Reflection;\n\nnamespace Language.Tests\n{\n    [TestClass]\n    public class LanguageTests\n    {\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldLoadCoreLanguageConstants()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            Assert.AreEqual(\"go\", LanguageManager.GetText(LanguageKeys.Verb_Go));\n            Assert.AreEqual(\"look\", LanguageManager.GetText(LanguageKeys.Verb_Look));\n        }\n\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldLoadAdditionalConstants()\n        {\n            LanguageManager.Initialize(\"en-US\", typeof(TestLanguageExtensions));\n\n            Assert.AreEqual(\"test verb\", LanguageManager.GetText(\"Test_Verb\"));\n        }\n\n        [TestMethod]\n        public void LanguageManager_GetText_ShouldReturnCorrectText()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            Assert.AreEqual(\"Go where?\", LanguageManager.GetText(LanguageKeys.Go_WherePrompt));\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(ArgumentException))]\n        public void LanguageManager_GetText_ShouldThrowExceptionForInvalidKey()\n        {\n            LanguageManager.Initialize(\"en-US\");\n\n            LanguageManager.GetText(\"InvalidKey\");\n        }\n\n        [TestMethod]\n        public void LanguageManager_Initialize_ShouldOverrideExistingConstantsWithAdditionalSources()\n        {\n            LanguageManager.Initialize(\"en-US\", typeof(TestLanguageOverrides));\n\n            Assert.AreEqual(\"Custom go text\", LanguageManager.GetText(LanguageKeys.Verb_Go));\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(ArgumentException))]\n        public void LanguageManager_Initialize_ShouldThrowExceptionForUnsupportedLanguage()\n        {\n            LanguageManager.Initialize(\"xx-XX\");\n        }\n\n        [TestMethod]\n        public void LanguageAttribute_ShouldBeAppliedCorrectly()\n        {\n            var enUsType = typeof(EnglishUS);\n            var attribute = enUsType.GetCustomAttribute<LanguageAttribute>();\n\n            Assert.IsNotNull(attribute);\n            Assert.AreEqual(\"en-US\", attribute.LanguageCode);\n        }\n    }\n\n    public static class TestLanguageExtensions\n    {\n        public const string Test_Verb = \"test verb\";\n    }\n\n    public static class TestLanguageOverrides\n    {\n        public const string Verb_Go = \"Custom go text\";\n    }\n}\n</antArtifact>\n\nNow, let me explain the key aspects of these unit tests:\n\n1. We're testing the `LanguageManager` class, which is responsible for managing language strings in our IF engine.\n\n2. We test the `Initialize` method with different scenarios:\n   - Loading core language constants\n   - Loading additional constants from a custom class\n   - Overriding existing constants with additional sources\n\n3. We test the `GetText` method for both valid and invalid keys.\n\n4. We ensure that an exception is thrown when trying to initialize with an unsupported language.\n\n5. We also test that the `LanguageAttribute` is applied correctly to our language classes.\n\nThese tests cover the main functionality of our language system, ensuring that:\n\n- Core language constants are loaded correctly\n- Additional language constants can be added\n- Existing constants can be overridden\n- The system behaves correctly with valid and invalid inputs\n- The `LanguageAttribute` is used correctly for language identification\n\nTo run these tests, you'll need to make sure that the `LanguageManager`, `LanguageKeys`, `EnglishUS`, and `LanguageAttribute` classes are accessible to the test project. You might need to adjust the namespace or add appropriate using statements depending on your project structure.\n\nIs there anything specific about the language system you'd like me to add more tests for?",
          "citations": []
        }
      ],
      "sender": "assistant",
      "created_at": "2024-08-28T01:10:06.034982Z",
      "updated_at": "2024-08-28T01:10:06.034982Z",
      "attachments": [],
      "files": []
    }
  ],
  "_extraction_metadata": {
    "extraction_method": "exact_title_match",
    "matched_title": "Unit Tests for Language Components",
    "extraction_timestamp": "2025-06-21T06:39:30.622Z",
    "source": "claude_project_sharpee"
  }
}