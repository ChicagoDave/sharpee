{
  "uuid": "634c923a-cdbc-4e9c-b729-9ee621b5e702",
  "name": "Refactoring Room Tests",
  "created_at": "2024-09-23T05:14:40.694042Z",
  "updated_at": "2024-09-23T05:15:18.259913Z",
  "account": {
    "uuid": "760c9b93-a257-47cd-bd61-d0b15a821e02"
  },
  "chat_messages": [
    {
      "uuid": "840e4aef-235e-44eb-9f89-8dffea24ff47",
      "text": "refactoring...need to re-emit RoomTests",
      "content": [
        {
          "start_timestamp": "2024-09-23T05:15:15.987120Z",
          "stop_timestamp": "2024-09-23T05:15:15.987120Z",
          "type": "text",
          "text": "refactoring...need to re-emit RoomTests",
          "citations": []
        }
      ],
      "sender": "human",
      "created_at": "2024-09-23T05:15:15.987120Z",
      "updated_at": "2024-09-23T05:15:15.987120Z",
      "attachments": [],
      "files": []
    },
    {
      "uuid": "74de2088-843f-4cc0-819f-6afe2755cd62",
      "text": " Certainly! I'll create a set of unit tests for the `Room` class based on its current implementation and the testing practices we've seen in other test files. Here's a comprehensive set of tests for the `Room` class:\n\n<antThinking>This is a good candidate for an artifact. It's substantial code that the user might want to modify or reference later. It's self-contained and represents a complete set of unit tests for the Room class.</antThinking>\n\n<antArtifact identifier=\"room-tests\" type=\"application/vnd.ant.code\" language=\"csharp\" title=\"RoomTests.cs\">\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing IFWorldModel;\nusing System;\nusing System.Linq;\n\nnamespace IFWorldModel.Tests\n{\n    [TestClass]\n    public class RoomTests\n    {\n        [TestMethod]\n        public void Room_Constructor_ShouldSetNameAndDescription()\n        {\n            var room = new Room(\"Living Room\", \"A cozy living room.\");\n\n            Assert.AreEqual(\"Living Room\", room.Name);\n            Assert.AreEqual(\"A cozy living room.\", room.GetPropertyValue<string>(\"Description\"));\n        }\n\n        [TestMethod]\n        public void Room_Constructor_ShouldSetDefaultProperties()\n        {\n            var room = new Room(\"Bedroom\", \"A small bedroom.\");\n\n            Assert.IsTrue(room.GetPropertyValue<bool>(\"IsRoom\"));\n            Assert.IsFalse(room.IsDark);\n            Assert.IsNotNull(room.Exits);\n            Assert.AreEqual(0, room.Exits.Count);\n        }\n\n        [TestMethod]\n        public void Room_IsDark_ShouldSetAndGetCorrectly()\n        {\n            var room = new Room(\"Cellar\", \"A dark cellar.\");\n            room.IsDark = true;\n\n            Assert.IsTrue(room.IsDark);\n        }\n\n        [TestMethod]\n        public void Room_ConnectDoor_ShouldConnectDoorCorrectly()\n        {\n            var room = new Room(\"Hall\", \"A spacious hall.\");\n            var door = new Door(\"North Door\", \"A wooden door to the north.\");\n\n            room.ConnectDoor(\"north\", door);\n\n            Assert.IsTrue(room.HasExit(\"north\"));\n            var connectedDoors = room.GetDoors().ToList();\n            Assert.AreEqual(1, connectedDoors.Count);\n            Assert.AreEqual(\"north\", connectedDoors[0].Direction);\n            Assert.AreEqual(door, connectedDoors[0].Door);\n        }\n\n        [TestMethod]\n        public void Room_GetDoors_ShouldReturnConnectedDoors()\n        {\n            var room = new Room(\"Kitchen\", \"A modern kitchen.\");\n            var door1 = new Door(\"North Door\", \"A door to the north.\");\n            var door2 = new Door(\"East Door\", \"A door to the east.\");\n\n            room.ConnectDoor(\"north\", door1);\n            room.ConnectDoor(\"east\", door2);\n\n            var doors = room.GetDoors().ToList();\n            Assert.AreEqual(2, doors.Count);\n            Assert.IsTrue(doors.Any(d => d.Direction == \"north\" && d.Door == door1));\n            Assert.IsTrue(doors.Any(d => d.Direction == \"east\" && d.Door == door2));\n        }\n\n        [TestMethod]\n        public void Room_GetFullDescription_ShouldIncludeExits()\n        {\n            var room = new Room(\"Dining Room\", \"An elegant dining room.\");\n            room.AddExit(\"north\", Guid.NewGuid());\n            room.AddExit(\"south\", Guid.NewGuid());\n\n            var description = room.GetFullDescription();\n\n            StringAssert.Contains(description, \"An elegant dining room.\");\n            StringAssert.Contains(description, \"Exits: north, south\");\n        }\n\n        [TestMethod]\n        public void Room_GetFullDescription_WhenDark_ShouldReturnDarkMessage()\n        {\n            var room = new Room(\"Basement\", \"A dark basement.\")\n                .SetDark(true);\n\n            var description = room.GetFullDescription();\n\n            Assert.AreEqual(\"It is too dark to see anything.\", description);\n        }\n\n        [TestMethod]\n        public void Room_GetExitsDescription_WithNoExits_ShouldReturnNoExitsMessage()\n        {\n            var room = new Room(\"Empty Room\", \"An empty room with no exits.\");\n\n            var exitsDescription = room.GetExitsDescription();\n\n            Assert.AreEqual(\"There are no obvious exits.\", exitsDescription);\n        }\n\n        [TestMethod]\n        public void Room_AddExit_ShouldAddExitCorrectly()\n        {\n            var room = new Room(\"Garden\", \"A beautiful garden.\");\n            var destinationId = Guid.NewGuid();\n\n            room.AddExit(\"north\", destinationId);\n\n            Assert.IsTrue(room.HasExit(\"north\"));\n            Assert.AreEqual(destinationId, room.GetExitDestination(\"north\"));\n        }\n\n        [TestMethod]\n        public void Room_RemoveExit_ShouldRemoveExitCorrectly()\n        {\n            var room = new Room(\"Library\", \"A quiet library.\");\n            room.AddExit(\"east\", Guid.NewGuid());\n\n            room.RemoveExit(\"east\");\n\n            Assert.IsFalse(room.HasExit(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_HasExit_ShouldReturnCorrectResult()\n        {\n            var room = new Room(\"Office\", \"A busy office.\");\n            room.AddExit(\"west\", Guid.NewGuid());\n\n            Assert.IsTrue(room.HasExit(\"west\"));\n            Assert.IsFalse(room.HasExit(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_GetExitDestination_ShouldReturnCorrectDestination()\n        {\n            var room = new Room(\"Foyer\", \"An entrance foyer.\");\n            var destinationId = Guid.NewGuid();\n            room.AddExit(\"south\", destinationId);\n\n            var result = room.GetExitDestination(\"south\");\n\n            Assert.IsTrue(result.HasValue);\n            Assert.AreEqual(destinationId, result.Value);\n        }\n\n        [TestMethod]\n        public void Room_GetExitDirections_ShouldReturnAllExitDirections()\n        {\n            var room = new Room(\"Crossroads\", \"A room with many exits.\");\n            room.AddExit(\"north\", Guid.NewGuid());\n            room.AddExit(\"south\", Guid.NewGuid());\n            room.AddExit(\"east\", Guid.NewGuid());\n\n            var directions = room.GetExitDirections().ToList();\n\n            Assert.AreEqual(3, directions.Count);\n            Assert.IsTrue(directions.Contains(\"north\"));\n            Assert.IsTrue(directions.Contains(\"south\"));\n            Assert.IsTrue(directions.Contains(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_SetDark_ShouldSetDarkPropertyCorrectly()\n        {\n            var room = new Room(\"Cave\", \"A dark cave.\");\n\n            room.SetDark(true);\n\n            Assert.IsTrue(room.IsDark);\n        }\n    }\n}\n</antArtifact>\n\nThese tests cover the main functionality of the `Room` class, including:\n\n1. Constructor behavior\n2. Setting and getting the `IsDark` property\n3. Connecting doors and retrieving connected doors\n4. Getting full description (including when the room is dark)\n5. Adding, removing, and checking exits\n6. Getting exit descriptions and directions\n7. The fluent interface for setting the dark property\n\nThe tests follow the Arrange-Act-Assert pattern and use a variety of Assert methods to check the expected behavior of the `Room` class. They also cover edge cases like rooms with no exits and checking for non-existent exits.\n\nThis comprehensive set of tests should provide good coverage for the `Room` class and help ensure its correctness as you continue to develop and refactor your Interactive Fiction engine.",
      "content": [
        {
          "start_timestamp": "2024-09-23T05:15:15.987120Z",
          "stop_timestamp": "2024-09-23T05:15:15.987120Z",
          "type": "text",
          "text": " Certainly! I'll create a set of unit tests for the `Room` class based on its current implementation and the testing practices we've seen in other test files. Here's a comprehensive set of tests for the `Room` class:\n\n<antThinking>This is a good candidate for an artifact. It's substantial code that the user might want to modify or reference later. It's self-contained and represents a complete set of unit tests for the Room class.</antThinking>\n\n<antArtifact identifier=\"room-tests\" type=\"application/vnd.ant.code\" language=\"csharp\" title=\"RoomTests.cs\">\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing IFWorldModel;\nusing System;\nusing System.Linq;\n\nnamespace IFWorldModel.Tests\n{\n    [TestClass]\n    public class RoomTests\n    {\n        [TestMethod]\n        public void Room_Constructor_ShouldSetNameAndDescription()\n        {\n            var room = new Room(\"Living Room\", \"A cozy living room.\");\n\n            Assert.AreEqual(\"Living Room\", room.Name);\n            Assert.AreEqual(\"A cozy living room.\", room.GetPropertyValue<string>(\"Description\"));\n        }\n\n        [TestMethod]\n        public void Room_Constructor_ShouldSetDefaultProperties()\n        {\n            var room = new Room(\"Bedroom\", \"A small bedroom.\");\n\n            Assert.IsTrue(room.GetPropertyValue<bool>(\"IsRoom\"));\n            Assert.IsFalse(room.IsDark);\n            Assert.IsNotNull(room.Exits);\n            Assert.AreEqual(0, room.Exits.Count);\n        }\n\n        [TestMethod]\n        public void Room_IsDark_ShouldSetAndGetCorrectly()\n        {\n            var room = new Room(\"Cellar\", \"A dark cellar.\");\n            room.IsDark = true;\n\n            Assert.IsTrue(room.IsDark);\n        }\n\n        [TestMethod]\n        public void Room_ConnectDoor_ShouldConnectDoorCorrectly()\n        {\n            var room = new Room(\"Hall\", \"A spacious hall.\");\n            var door = new Door(\"North Door\", \"A wooden door to the north.\");\n\n            room.ConnectDoor(\"north\", door);\n\n            Assert.IsTrue(room.HasExit(\"north\"));\n            var connectedDoors = room.GetDoors().ToList();\n            Assert.AreEqual(1, connectedDoors.Count);\n            Assert.AreEqual(\"north\", connectedDoors[0].Direction);\n            Assert.AreEqual(door, connectedDoors[0].Door);\n        }\n\n        [TestMethod]\n        public void Room_GetDoors_ShouldReturnConnectedDoors()\n        {\n            var room = new Room(\"Kitchen\", \"A modern kitchen.\");\n            var door1 = new Door(\"North Door\", \"A door to the north.\");\n            var door2 = new Door(\"East Door\", \"A door to the east.\");\n\n            room.ConnectDoor(\"north\", door1);\n            room.ConnectDoor(\"east\", door2);\n\n            var doors = room.GetDoors().ToList();\n            Assert.AreEqual(2, doors.Count);\n            Assert.IsTrue(doors.Any(d => d.Direction == \"north\" && d.Door == door1));\n            Assert.IsTrue(doors.Any(d => d.Direction == \"east\" && d.Door == door2));\n        }\n\n        [TestMethod]\n        public void Room_GetFullDescription_ShouldIncludeExits()\n        {\n            var room = new Room(\"Dining Room\", \"An elegant dining room.\");\n            room.AddExit(\"north\", Guid.NewGuid());\n            room.AddExit(\"south\", Guid.NewGuid());\n\n            var description = room.GetFullDescription();\n\n            StringAssert.Contains(description, \"An elegant dining room.\");\n            StringAssert.Contains(description, \"Exits: north, south\");\n        }\n\n        [TestMethod]\n        public void Room_GetFullDescription_WhenDark_ShouldReturnDarkMessage()\n        {\n            var room = new Room(\"Basement\", \"A dark basement.\")\n                .SetDark(true);\n\n            var description = room.GetFullDescription();\n\n            Assert.AreEqual(\"It is too dark to see anything.\", description);\n        }\n\n        [TestMethod]\n        public void Room_GetExitsDescription_WithNoExits_ShouldReturnNoExitsMessage()\n        {\n            var room = new Room(\"Empty Room\", \"An empty room with no exits.\");\n\n            var exitsDescription = room.GetExitsDescription();\n\n            Assert.AreEqual(\"There are no obvious exits.\", exitsDescription);\n        }\n\n        [TestMethod]\n        public void Room_AddExit_ShouldAddExitCorrectly()\n        {\n            var room = new Room(\"Garden\", \"A beautiful garden.\");\n            var destinationId = Guid.NewGuid();\n\n            room.AddExit(\"north\", destinationId);\n\n            Assert.IsTrue(room.HasExit(\"north\"));\n            Assert.AreEqual(destinationId, room.GetExitDestination(\"north\"));\n        }\n\n        [TestMethod]\n        public void Room_RemoveExit_ShouldRemoveExitCorrectly()\n        {\n            var room = new Room(\"Library\", \"A quiet library.\");\n            room.AddExit(\"east\", Guid.NewGuid());\n\n            room.RemoveExit(\"east\");\n\n            Assert.IsFalse(room.HasExit(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_HasExit_ShouldReturnCorrectResult()\n        {\n            var room = new Room(\"Office\", \"A busy office.\");\n            room.AddExit(\"west\", Guid.NewGuid());\n\n            Assert.IsTrue(room.HasExit(\"west\"));\n            Assert.IsFalse(room.HasExit(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_GetExitDestination_ShouldReturnCorrectDestination()\n        {\n            var room = new Room(\"Foyer\", \"An entrance foyer.\");\n            var destinationId = Guid.NewGuid();\n            room.AddExit(\"south\", destinationId);\n\n            var result = room.GetExitDestination(\"south\");\n\n            Assert.IsTrue(result.HasValue);\n            Assert.AreEqual(destinationId, result.Value);\n        }\n\n        [TestMethod]\n        public void Room_GetExitDirections_ShouldReturnAllExitDirections()\n        {\n            var room = new Room(\"Crossroads\", \"A room with many exits.\");\n            room.AddExit(\"north\", Guid.NewGuid());\n            room.AddExit(\"south\", Guid.NewGuid());\n            room.AddExit(\"east\", Guid.NewGuid());\n\n            var directions = room.GetExitDirections().ToList();\n\n            Assert.AreEqual(3, directions.Count);\n            Assert.IsTrue(directions.Contains(\"north\"));\n            Assert.IsTrue(directions.Contains(\"south\"));\n            Assert.IsTrue(directions.Contains(\"east\"));\n        }\n\n        [TestMethod]\n        public void Room_SetDark_ShouldSetDarkPropertyCorrectly()\n        {\n            var room = new Room(\"Cave\", \"A dark cave.\");\n\n            room.SetDark(true);\n\n            Assert.IsTrue(room.IsDark);\n        }\n    }\n}\n</antArtifact>\n\nThese tests cover the main functionality of the `Room` class, including:\n\n1. Constructor behavior\n2. Setting and getting the `IsDark` property\n3. Connecting doors and retrieving connected doors\n4. Getting full description (including when the room is dark)\n5. Adding, removing, and checking exits\n6. Getting exit descriptions and directions\n7. The fluent interface for setting the dark property\n\nThe tests follow the Arrange-Act-Assert pattern and use a variety of Assert methods to check the expected behavior of the `Room` class. They also cover edge cases like rooms with no exits and checking for non-existent exits.\n\nThis comprehensive set of tests should provide good coverage for the `Room` class and help ensure its correctness as you continue to develop and refactor your Interactive Fiction engine.",
          "citations": []
        }
      ],
      "sender": "assistant",
      "created_at": "2024-09-23T05:15:15.987120Z",
      "updated_at": "2024-09-23T05:15:15.987120Z",
      "attachments": [],
      "files": []
    }
  ],
  "_extraction_metadata": {
    "extraction_method": "exact_title_match",
    "matched_title": "Refactoring Room Tests",
    "extraction_timestamp": "2025-06-21T06:39:31.678Z",
    "source": "claude_project_sharpee"
  }
}