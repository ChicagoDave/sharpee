{
  "uuid": "2dd67415-e868-42ed-8689-d922122663b4",
  "name": "Common Adverbs for Interactive Fiction",
  "created_at": "2024-09-01T07:50:13.466175Z",
  "updated_at": "2024-09-01T07:50:37.454501Z",
  "account": {
    "uuid": "760c9b93-a257-47cd-bd61-d0b15a821e02"
  },
  "chat_messages": [
    {
      "uuid": "6a3a8461-dd1a-4376-b199-ff602a0972ba",
      "text": "what might common IF adverbs be?",
      "content": [
        {
          "start_timestamp": "2024-09-01T07:50:36.242075Z",
          "stop_timestamp": "2024-09-01T07:50:36.242075Z",
          "type": "text",
          "text": "what might common IF adverbs be?",
          "citations": []
        }
      ],
      "sender": "human",
      "created_at": "2024-09-01T07:50:36.242075Z",
      "updated_at": "2024-09-01T07:50:36.242075Z",
      "attachments": [],
      "files": []
    },
    {
      "uuid": "34160364-40ce-4c4c-90ad-f944a8870324",
      "text": " Adverbs are an important part of interactive fiction as they can add nuance and detail to player actions. Here's a list of common adverbs that might be useful in an IF context:\n\n1. Carefully\n2. Quickly\n3. Slowly\n4. Gently\n5. Forcefully\n6. Quietly\n7. Loudly\n8. Repeatedly\n9. Thoroughly\n10. Silently\n11. Hastily\n12. Cautiously\n13. Nervously\n14. Confidently\n15. Angrily\n16. Happily\n17. Sadly\n18. Curiously\n19. Suspiciously\n20. Patiently\n21. Impatiently\n22. Firmly\n23. Lightly\n24. Violently\n25. Calmly\n26. Carefully\n27. Repeatedly\n28. Suddenly\n29. Gradually\n30. Accidentally\n\nTo incorporate these adverbs into our parser and grammar system, we could add a new `Adv` pattern element and update our `Definitions` class. Here's how we might implement this:\n\n1. First, let's add a new `Adv` pattern element:\n\n```csharp\npublic class Adv : PatternElement { }\n```\n\n2. Now, let's update the `Definitions` class to include adverbs:\n\n```csharp\npublic static class Definitions\n{\n    private static HashSet<string> Adverbs { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n    // ... existing code ...\n\n    public static void DefineAdverb(string adverb)\n    {\n        Adverbs.Add(adverb.ToLowerInvariant());\n    }\n\n    public static Adv Adv() => new Adv();\n\n    public static bool IsKnownAdverb(string word) => Adverbs.Contains(word);\n\n    static Definitions()\n    {\n        // ... existing initialization ...\n\n        // Initialize known adverbs\n        string[] knownAdverbs = {\n            \"carefully\", \"quickly\", \"slowly\", \"gently\", \"forcefully\", \"quietly\", \"loudly\", \"repeatedly\",\n            \"thoroughly\", \"silently\", \"hastily\", \"cautiously\", \"nervously\", \"confidently\", \"angrily\",\n            \"happily\", \"sadly\", \"curiously\", \"suspiciously\", \"patiently\", \"impatiently\", \"firmly\",\n            \"lightly\", \"violently\", \"calmly\", \"carefully\", \"repeatedly\", \"suddenly\", \"gradually\", \"accidentally\"\n        };\n\n        foreach (var adv in knownAdverbs)\n        {\n            DefineAdverb(adv);\n        }\n    }\n\n    // Update TokenizeInput method to handle adverbs\n    public static TokenizedInput TokenizeInput(string input)\n    {\n        // ... existing code ...\n\n        foreach (var word in words)\n        {\n            if (Verbs.Any(v => v.Name == word || v.Aliases.Contains(word)))\n            {\n                // ... existing verb handling ...\n            }\n            else if (IsKnownArticle(word))\n            {\n                currentPhrase.Articles.Add(word);\n            }\n            else if (IsKnownAdjective(word))\n            {\n                currentPhrase.Adjectives.Add(word);\n            }\n            else if (IsKnownAdverb(word))\n            {\n                currentPhrase.Adverbs.Add(word);\n            }\n            else if (IsKnownPreposition(word))\n            {\n                currentPhrase.Prepositions.Add(word);\n            }\n            else // Treat as a potential noun or unknown word\n            {\n                currentPhrase.Words.Add(word);\n            }\n        }\n\n        // ... rest of the method ...\n    }\n}\n```\n\n3. Update the `Phrase` class to include adverbs:\n\n```csharp\npublic class Phrase\n{\n    public List<string> Articles { get; } = new List<string>();\n    public List<string> Adjectives { get; } = new List<string>();\n    public List<string> Adverbs { get; } = new List<string>();\n    public List<string> Prepositions { get; } = new List<string>();\n    public List<string> Words { get; } = new List<string>();\n\n    public bool IsEmpty => !Articles.Any() && !Adjectives.Any() && !Adverbs.Any() && !Prepositions.Any() && !Words.Any();\n\n    public IEnumerable<string> AllWords => Articles.Concat(Adjectives).Concat(Adverbs).Concat(Prepositions).Concat(Words);\n}\n```\n\n4. Finally, update the grammar definitions to allow for adverbs in appropriate places. For example:\n\n```csharp\npublic static void DefineObjectInteractions()\n{\n    Define(\"Take\", \"get\", \"pick up\")\n        .Pattern(Adv(), Multi())\n        .Pattern(Adv(), Multi(), Choice(Lit(\"from\"), Lit(\"off\")), Var(\"container\"))\n        .Pattern(Multi(), Choice(Lit(\"from\"), Lit(\"off\")), Var(\"container\"));\n\n    Define(\"Examine\", \"x\", \"look at\")\n        .Pattern(Adv(), Multi())\n        .Pattern(Multi());\n\n    // ... other definitions ...\n}\n```\n\nThis implementation allows for adverbs to be used in commands, adding more nuance to player actions. For example, players could now use commands like \"carefully examine the old book\" or \"quickly take the key\".\n\nRemember to update the `Parser` class to handle adverbs when creating `ParsedAction` objects. You might want to add an `Adverbs` property to `ParsedAction` to store any adverbs used in the command.",
      "content": [
        {
          "start_timestamp": "2024-09-01T07:50:36.242075Z",
          "stop_timestamp": "2024-09-01T07:50:36.242075Z",
          "type": "text",
          "text": " Adverbs are an important part of interactive fiction as they can add nuance and detail to player actions. Here's a list of common adverbs that might be useful in an IF context:\n\n1. Carefully\n2. Quickly\n3. Slowly\n4. Gently\n5. Forcefully\n6. Quietly\n7. Loudly\n8. Repeatedly\n9. Thoroughly\n10. Silently\n11. Hastily\n12. Cautiously\n13. Nervously\n14. Confidently\n15. Angrily\n16. Happily\n17. Sadly\n18. Curiously\n19. Suspiciously\n20. Patiently\n21. Impatiently\n22. Firmly\n23. Lightly\n24. Violently\n25. Calmly\n26. Carefully\n27. Repeatedly\n28. Suddenly\n29. Gradually\n30. Accidentally\n\nTo incorporate these adverbs into our parser and grammar system, we could add a new `Adv` pattern element and update our `Definitions` class. Here's how we might implement this:\n\n1. First, let's add a new `Adv` pattern element:\n\n```csharp\npublic class Adv : PatternElement { }\n```\n\n2. Now, let's update the `Definitions` class to include adverbs:\n\n```csharp\npublic static class Definitions\n{\n    private static HashSet<string> Adverbs { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n    // ... existing code ...\n\n    public static void DefineAdverb(string adverb)\n    {\n        Adverbs.Add(adverb.ToLowerInvariant());\n    }\n\n    public static Adv Adv() => new Adv();\n\n    public static bool IsKnownAdverb(string word) => Adverbs.Contains(word);\n\n    static Definitions()\n    {\n        // ... existing initialization ...\n\n        // Initialize known adverbs\n        string[] knownAdverbs = {\n            \"carefully\", \"quickly\", \"slowly\", \"gently\", \"forcefully\", \"quietly\", \"loudly\", \"repeatedly\",\n            \"thoroughly\", \"silently\", \"hastily\", \"cautiously\", \"nervously\", \"confidently\", \"angrily\",\n            \"happily\", \"sadly\", \"curiously\", \"suspiciously\", \"patiently\", \"impatiently\", \"firmly\",\n            \"lightly\", \"violently\", \"calmly\", \"carefully\", \"repeatedly\", \"suddenly\", \"gradually\", \"accidentally\"\n        };\n\n        foreach (var adv in knownAdverbs)\n        {\n            DefineAdverb(adv);\n        }\n    }\n\n    // Update TokenizeInput method to handle adverbs\n    public static TokenizedInput TokenizeInput(string input)\n    {\n        // ... existing code ...\n\n        foreach (var word in words)\n        {\n            if (Verbs.Any(v => v.Name == word || v.Aliases.Contains(word)))\n            {\n                // ... existing verb handling ...\n            }\n            else if (IsKnownArticle(word))\n            {\n                currentPhrase.Articles.Add(word);\n            }\n            else if (IsKnownAdjective(word))\n            {\n                currentPhrase.Adjectives.Add(word);\n            }\n            else if (IsKnownAdverb(word))\n            {\n                currentPhrase.Adverbs.Add(word);\n            }\n            else if (IsKnownPreposition(word))\n            {\n                currentPhrase.Prepositions.Add(word);\n            }\n            else // Treat as a potential noun or unknown word\n            {\n                currentPhrase.Words.Add(word);\n            }\n        }\n\n        // ... rest of the method ...\n    }\n}\n```\n\n3. Update the `Phrase` class to include adverbs:\n\n```csharp\npublic class Phrase\n{\n    public List<string> Articles { get; } = new List<string>();\n    public List<string> Adjectives { get; } = new List<string>();\n    public List<string> Adverbs { get; } = new List<string>();\n    public List<string> Prepositions { get; } = new List<string>();\n    public List<string> Words { get; } = new List<string>();\n\n    public bool IsEmpty => !Articles.Any() && !Adjectives.Any() && !Adverbs.Any() && !Prepositions.Any() && !Words.Any();\n\n    public IEnumerable<string> AllWords => Articles.Concat(Adjectives).Concat(Adverbs).Concat(Prepositions).Concat(Words);\n}\n```\n\n4. Finally, update the grammar definitions to allow for adverbs in appropriate places. For example:\n\n```csharp\npublic static void DefineObjectInteractions()\n{\n    Define(\"Take\", \"get\", \"pick up\")\n        .Pattern(Adv(), Multi())\n        .Pattern(Adv(), Multi(), Choice(Lit(\"from\"), Lit(\"off\")), Var(\"container\"))\n        .Pattern(Multi(), Choice(Lit(\"from\"), Lit(\"off\")), Var(\"container\"));\n\n    Define(\"Examine\", \"x\", \"look at\")\n        .Pattern(Adv(), Multi())\n        .Pattern(Multi());\n\n    // ... other definitions ...\n}\n```\n\nThis implementation allows for adverbs to be used in commands, adding more nuance to player actions. For example, players could now use commands like \"carefully examine the old book\" or \"quickly take the key\".\n\nRemember to update the `Parser` class to handle adverbs when creating `ParsedAction` objects. You might want to add an `Adverbs` property to `ParsedAction` to store any adverbs used in the command.",
          "citations": []
        }
      ],
      "sender": "assistant",
      "created_at": "2024-09-01T07:50:36.242075Z",
      "updated_at": "2024-09-01T07:50:36.242075Z",
      "attachments": [],
      "files": []
    }
  ],
  "_extraction_metadata": {
    "extraction_method": "exact_title_match",
    "matched_title": "Common Adverbs for Interactive Fiction",
    "extraction_timestamp": "2025-06-21T06:39:30.475Z",
    "source": "claude_project_sharpee"
  }
}